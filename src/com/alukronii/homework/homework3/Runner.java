package com.alukronii.homework.homework3;

import com.alukronii.homework.homework3.pyramid.Pyramid1;

public class Runner {
    public static void main(String[] args) {
        ex3();
    }

    public static void ex1() {
        //shop
    }

    public static void ex2() {
        //Задача: Фабрика телефонов
        //Организовать фабрику создания двух телефонов
        //
        //Создать комплектующие телефона
        //Камера: умеет фотографировать. Свойство - количество мега пикселей.
        //Процессор: свойство - количество вычислений в секунду (mhz)
        //Корпус: свойства - размеры - ширина, высота, длина
        //
        //Создать телефон Samsung, который состоит из процессора, камеры, корпуса.
        //Умеет фотографировать используя камеру (печать в консоль - "сделано фото")
        //
        //Создать телефон Iphone, который состоит из двух процессоров, камеры, корпуса.
        //Умеет фотографировать используя камеру (печать в консоль - "сделано фото").
        //Умеет печатать на экран информацию о процессорах.
        //
        //Создать фабрику Iphone, которая:
        //Создает iphone и заполняет его двумя процессорами (1000 Mhz), 8 мегапиксельной камерой,
        // и корпусом 60х200х10
        //
        //Создать фабрику Samsung, которая:
        //Создает samsung и заполняет его процессором (1500 Mhz), 16 мегапиксельной камерой,
        // и корпусом 60х200х15
        //ВНИМАНИЕ! Фабрики создают телефоны без создания экземпляра фабрики!
    }

    public static void ex3() {
        Pyramid1 pyramid1 = new Pyramid1();
        pyramid1.print();
    }

    /**
     * Для продвинутых
     */
    public static void ex4() {
        //Зада: Иммутабельный город.
        //
        //Создать класс House (наименование улицы, номер дома) - создать сеттеры! и геттеры на него.
        //Переопределить вывод в текст - вывод улицы и номера дома
        //Создать иммутабельный класс City (наименование города, и массив домов).
        //Переопределить вывод в текст - чтобы выводило имя города, и все дома
        //
        //1. Создать два дома, создать город с массивом созданных домов
        //2. Сделать так, чтобы у города нельзя было поменять свойства.
        //3. Сделать так, что если дом получен из города, то при изменении свойств этого дома,
        // эти изменения не затронут дом находящийся внутри города.
        // Т.е. результат должен соответствовать псевдокоду ниже:
        //
        //[] - квадратные скобки - массив
        //{} - объект
        // City city = new City([{new House('Lenina', 1)}], "Мурманск");
        // System.out.println(city);
        //-- City{[House{street: Lenina, house: 1}], name: "Мурманск"}
        //House house = city.getHouses()[0];
        //house.setStreet('Kotova');
        //System.out.println(house);
        //-- House{street: Kotova, house: 1}
        //System.out.println(city);
        //-- City{House{street: Lenina, house: 1}}

    }
}